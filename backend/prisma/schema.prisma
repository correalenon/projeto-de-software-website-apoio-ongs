// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    VOLUNTARY
    COLLABORATOR
}

enum ContributionType {
  PRESENCIAL
  REMOTO
  DOACAO
  SUPORTE_TECNICO
  OUTRO
}

model Images {
  id            Int         @id @default(autoincrement())
  url           String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  project       Projects?   @relation(fields: [projectId], references: [id])
  projectId     Int?
  post          Posts?      @relation(fields: [postId], references: [id])
  postId        Int?
}

model Likes {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          Users?      @relation(fields: [userId], references: [id])
  userId        Int?
  post          Posts?      @relation(fields: [postId], references: [id])
  postId        Int?
}

model Comments {
  id            Int         @id @default(autoincrement())
  description   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          Users?      @relation(fields: [userId], references: [id])
  userId        Int?
  post          Posts?      @relation(fields: [postId], references: [id])
  postId        Int?
}

model Posts {
  id            Int         @id @default(autoincrement())
  title         String
  description   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          Users?      @relation(fields: [userId], references: [id])
  userId        Int?
  project       Projects?   @relation(fields: [projectId], references: [id])
  projectId     Int?
  images        Images[]
  likes         Likes[]
  comments      Comments[]
  activities    Activities[]
  tags          Tags[]
}

model Activities {
  id            Int         @id @default(autoincrement())
  description   String
  createdAt     DateTime    @default(now())
  user          Users?      @relation(fields: [userId], references: [id])
  userId        Int?
  post          Posts?      @relation(fields: [postId], references: [id])
  postId        Int?
  project       Projects?   @relation(fields: [projectId], references: [id])
  projectId     Int?
}

model Tags {
  id            Int         @id @default(autoincrement())
  name          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          Users?      @relation(fields: [userId], references: [id])
  userId        Int?
  ong           Ongs?       @relation(fields: [ongId], references: [id])
  ongId         Int?
  project       Projects?   @relation(fields: [projectId], references: [id])
  projectId     Int?
  post          Posts?      @relation(fields: [postId], references: [id])
  postId        Int?
}

model Users {
  id            Int             @id @default(autoincrement())
  name          String 
  email         String          @unique
  password      String
  location      String
  views         Int             @default(0)
  connections   Int             @default(0)
  role          Role            @default(ADMIN)
  profileImage  String?
  coverImage    String?
  description   String?
  skills        String[]
  industry      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  posts         Posts[]
  likes         Likes[]
  comments      Comments[]
  activity      Activities[]
  ong           Ongs?           @relation(fields: [ongId], references: [id])
  ongId         Int?
  tags          Tags[]
  contributions Contribution[]
}

model Ongs {
  id                      Int         @id @default(autoincrement())
  nameONG                 String
  socialName              String
  cnpj                    String      @unique
  password                String
  foundationDate          DateTime
  area                    String?
  goals                   String?
  cep                     String?
  street                  String?
  number                  String?
  complement              String?
  city                    String?
  district                String?
  state                   String?
  cellphone               String?
  emailONG                String      @unique
  socialMedia             String?
  nameLegalGuardian       String
  cpfLegalGuardian        String?
  rgLegalGuardian         String?
  cellphoneLegalGuardian  String?
  description             String?
  profileImage            String?
  coverImage              String?
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  users                   Users[]
  projects                Projects[]
  tags                    Tags[]
  contributions           Contribution[]
}

model Projects {
  id            Int             @id @default(autoincrement())
  name          String 
  description   String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ong           Ongs            @relation(fields: [ongId], references: [id])
  ongId         Int
  images        Images[]
  posts         Posts[]
  activities    Activities[]
  tags          Tags[]
}

model Contribution {
  id             Int       @id @default(autoincrement())
  user           Users     @relation(fields: [userId], references: [id])
  userId         Int
  name           String    // Nome da ação/projeto
  ongName        String    // Nome da ONG (mesmo que não esteja cadastrada no sistema)
  ong            Ongs?     @relation(fields: [ongId], references: [id])
  ongId          Int?      // ID da ONG cadastrada (opcional)
  date           DateTime
  type           ContributionType
  description    String
  hours          Int
  location       String
  rating         Int?      // nota da ONG (1 a 5)
  feedback       String?   // comentário da ONG

  createdAt      DateTime  @default(now())
}

