// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    VOLUNTARY
    ADVERTISER
}

model Images {
  id        Int         @id @default(autoincrement())
  url       String
  ongs      Ongs?       @relation(fields: [ongsId], references: [id])
  ongsId    Int?
  projects  Projects?   @relation(fields: [projectsId], references: [id])
  projectsId Int?
  users     Users?      @relation(fields: [usersId], references: [id])
  usersId   Int?
}

model Activities {
  id            Int         @id @default(autoincrement())
  description   String
  createdAt     DateTime    @default(now())
  users         Users?      @relation(fields: [usersId], references: [id])
  usersId       Int?
}

model Tags {
  id            Int         @id @default(autoincrement())
  name          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  users         Users?      @relation(fields: [usersId], references: [id])
  usersId       Int?
}

model Users {
  id            Int         @id @default(autoincrement())
  name          String 
  email         String      @unique
  password      String
  location      String
  views         Int         @default(0)
  connections   Int         @default(0)
  role          Role        @default(ADMIN)
  description   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  activity      Activities[]
  tags          Tags[]
  images        Images[]
  ongs          Ongs[]
}

model Ongs {
  id            Int         @id @default(autoincrement())
  name          String 
  cnpj          String      @unique
  contact       String
  description   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          Users       @relation(fields: [userId], references: [id])
  userId        Int
  projects      Projects[]
  images        Images[]
}

model Projects {
  id            Int         @id @default(autoincrement())
  name          String 
  description   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  ong           Ongs        @relation(fields: [ongId], references: [id])
  ongId         Int
  images        Images[]
}
